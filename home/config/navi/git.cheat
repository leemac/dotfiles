% Git

# Search all git commit messages for a given string, case-insensitive
git log --all -i --grep '<search-text>'

# Search all git commit contents for a given string
git log --all -S '<search-text>'

# Checkout the main branch
git checkout <main_branch>

# Checkout target branch or tag
git checkout <branch_or_tag>

# Rebase on a given branch
git rebase <branch>

# Rebase interactively on a given branch
git rebase -i <branch>

# Rebase interactively on a given commit
git rebase -i <commit>

# Rebase interactively before the root
git rebase -i --root

# cherry-pick a given branch
git cherry-pick -i <branch>

# cherry-pick a given commit
git cherry-pick -i <commit>

# List dirty files
cat <(git diff --name-only) <(git diff --name-only --staged) <(git ls-files -o --exclude-standard)

# Open dirty files in $EDITOR
cat <(git diff --name-only) <(git diff --name-only --staged) <(git ls-files -o --exclude-standard) | xargs -o $EDITOR

# Open files from HEAD commit in $EDITOR
git diff-tree --no-commit-id --name-only -r HEAD | xargs -o $EDITOR

# Open files from given commit in $EDITOR
git diff-tree --no-commit-id --name-only -r <commit> | xargs -o $EDITOR

# Git diff specific file
git diff <git_file>

# Git diff specific file with another branch
git diff <branch> -- <git_file>

# Git diff with difftastic
GIT_EXTERNAL_DIFF=difft git diff

# Git diff specific file with difftastic
GIT_EXTERNAL_DIFF=difft git diff <git_file>

# Git diff specific file with another branch with difftastic
GIT_EXTERNAL_DIFF=difft git diff <branch> -- <git_file>

# Git log with difftastic
GIT_EXTERNAL_DIFF=difft git log -p --ext-diff

# Git show commit with difftastic
GIT_EXTERNAL_DIFF=difft git show <commit> --ext-diff

# Commit with co-author
git commit -e -m "commit message" -m "<co_authors>"

# Restore staged files
git restore --staged <staged_files>

# Delete local branches not on remote
git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep <remote>) | awk '{print $1}' | xargs git branch -D

# Delete a branch
git branch -d <branch>

# Force-Delete a branch
git branch -D <branch>

# Checkout last branch
git checkout -

# Pull and rebase on main branch
git pull --rebase <remote> <main_branch>

# Pull and rebase interactively on main branch
git pull --rebase=interactive <remote> <main_branch>

# Fetch and merge remote main branch
git fetch <remote> <main_branch> && git merge <remote>/<main_branch>

# Revert without committing
git revert --no-commit <ref>

# Revert a given commit without committing
git revert --no-commit <commit>

# Revert a given commit
git revert <commit>

# Checkout contents of file
git checkout -- <git_changed_file>

# Checkout contents of file on another branch
git checkout <branch_or_tag> -- <git_file>

# Show contents of a given commit
git show <commit>

# Show file on a given branch
git show <branch>:<git_file>

# Show file at a given commit
git show <commit>:<git_file>

# Optimize Git Repo
git gc --prune=now --aggressive

# Print hash of HEAD
git rev-parse HEAD | tr -d '\n'

# Copy hash of HEAD
git rev-parse HEAD | tr -d '\n' | pbcopy

# Print short hash of HEAD
git rev-parse HEAD | head -c 7

# Copy short hash of HEAD
git rev-parse HEAD | head -c 7 | pbcopy

# "Undo" last commit
git reset HEAD~1

# Create a commit to make current branch look like a given branch
git diff HEAD <branch> | git apply

# Create a commit to make current branch look like a given commit
git diff HEAD <commit> | git apply

# Apply patch on clipboard
git apply <(pbpaste)

# Reverse patch on clipboard
git apply --reverse <(pbpaste)

# Create new "Workspace" with a different git author
cat >> .envrc <<EOF
export GIT_AUTHOR_NAME="<git_author_name>"
export GIT_AUTHOR_EMAIL="<git_author_email>"
export GIT_COMMITTER_NAME=\$GIT_AUTHOR_NAME
export GIT_COMMITTER_EMAIL=\$GIT_AUTHOR_EMAIL
EOF

$ co_authors: git log --pretty="%an <%ae>" | sort | uniq | sed 's|^|Co-authored-by: |g' --- --multi
$ staged_files: git diff --staged --name-only --- --multi
$ branch: git branch | cut -c 3-
$ main_branch: git branch | cut -c 3- | grep -m 1 'main\|master\|dev\|development\|trunk'
$ branch_or_tag: (git branch | cut -c 3-; git tag)
$ commit: git log --oneline --max-count 250 --- --map 'cut -d " " -f 1'
$ git_changed_file: git diff --name-only
$ git_file: git ls-files
$ ref: echo -e 'HEAD\n'
$ remote: git remote